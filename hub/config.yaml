version: "v0.5.0"

rbac:
  enabled: true

hub:
  extraConfig: |
    from kubespawner import KubeSpawner
    from tornado import gen
    import yaml

    class CustomKubeSpawner(KubeSpawner):
      @gen.coroutine
      def start(self):
        with open('/etc/jupyterhub/config/custom.memory') as f:
          custom_attr_lists = yaml.safe_load(f)
          for attr, users in custom_attr_lists.items():
            if self.user.name in users:
              self.mem_limit = attr
              self.mem_guarantee = attr
              break

        with open('/etc/jupyterhub/config/custom.image') as f:
          custom_attr_lists = yaml.safe_load(f)
          for attr, users in custom_attr_lists.items():
            if self.user.name in users:
              self.singleuser_image_spec = attr
              break

        return (yield super().start())
    c.JupyterHub.spawner_class = CustomKubeSpawner
    c.CustomKubeSpawner.singleuser_extra_pod_config = {
      'affinity': {
        'podAffinity': {
          'preferredDuringSchedulingIgnoredDuringExecution': [
            {
              'weight': 100,
              'podAffinityTerm': {
                'labelSelector': {
                  'matchExpressions': [
                    {
                      'key': 'component',
                      'operator': 'In',
                      'values': ['singleuser-server']
                    }
                  ]
                },
                'topologyKey': 'kubernetes.io/hostname'
              }
            }
          ],
        }
      }
    }

cull:
  enabled: true
  timeout: 3600 # default

auth:
  type: dummy
    password: "wat"
  #type: google
  admin:
    users:
      # infrastructure
      - rylo
      - yuvipanda
      # sp18 prob140 Professors
      - adhikari
      # sp18 prob140 GSIs
      - dibya.ghosh
      - zhang.j

singleuser:
  memory:
    guarantee: 1G
    limit: 1G
  image:
    name: "berkeleydsep/singleuser-prob140"
  storage:
    capacity: 2Gi
